Things in the new repo that need to be fixed
--------------------------------------------

Remove items as they are fixed.

* Still have issues with .f90 not depending on .F90 file.  For example,
  I modified src/truchas/physics/enclosure/radiation/ER_solver.F90 but
  a new 'make' wouldn't generate a new .f90 file -- needed to manually
  remove the .f90 file.

* Had to remove the -C=all nagfor flag from the debug build as it
  triggers an internal compiler error on pgslib_init.  Old build had
  a separate set of compiler flags for pgslib and ubiksolve.  Need to
  address this issue somehow; we want to get back to using -C=all for
  the source in truchas.
   
* Some NAG Fortran debug compiler flags are causing runtime cmake failures.
  I've had to drop "-u -g90" in order for cmake to properly generate a
  working build system.  We need to be able to use these flags for building
  the source, but there's no reason cmake scripts need to be using these to
  figure out its configuration. Here are the diagnostic messages I'm seeing:
  
  -- Check for working Fortran compiler: /opt/nag/nagfor-5.3.2/bin/nagfor
  -- Check for working Fortran compiler: /opt/nag/nagfor-5.3.2/bin/nagfor  -- works
  -- Detecting Fortran compiler ABI info
  -- Detecting Fortran compiler ABI info - done
  -- Checking whether /opt/nag/nagfor-5.3.2/bin/nagfor supports Fortran 90
  -- Checking whether /opt/nag/nagfor-5.3.2/bin/nagfor supports Fortran 90 -- no
  THIS FAILURE IS CAUSED BY "-u"                                             ^^^^
  
  -- Detecting Fortran/C Interface
  -- Detecting Fortran/C Interface - Failed to compile
  -- Verifying Fortran/C Compiler Compatibility
  CMake Warning (dev) at /opt/share/cmake-2.8/Modules/FortranCInterface.cmake:215 (message):
    No FortranCInterface mangling known for VerifyFortran
  Call Stack (most recent call first):
    CMakeLists.txt:24 (FortranCInterface_HEADER)
  This warning is for project developers.  Use -Wno-dev to suppress it.
  THIS FAILURE IS CAUSED BY "-g90"

* The old build conditionally sets the preprocessor macro SUPPORTS_NEWUNIT
  when compiling truchas source.  We need to replicate this in the new build.
  Here's the relevant makefile snippet:
  
    ifeq ($(shell $(optdir)/newunit-test.sh $(FC)),YES)
      CPPFLAGS += -DSUPPORTS_NEWUNIT
    endif
    
  It invokes a script to test whether the compiler supports this feature.
  Here's the script:
  
    #!/bin/sh
    cat > conftest.f90 << EOF
    subroutine conftest
    open(newunit=n,file='conftest.out')
    end subroutine
    EOF
    $1 -c conftest.f90 > /dev/null 2>&1
    status=$?
    rm -f conftest.o conftest.f90 conftest.out
    if [[ $status == 0 ]]; then
      echo YES
    else
      echo NO
    fi
    exit $status
  
* The 'make package' target should create tar files and a shell script that builds
  the code and creates a binary ditrubtion. Not working at all.

* The prefices for each of the external packages should be changed to include
  the version number. Also ExternalProject_Add is generating a spruious src/
  but this is NOT the code source directory.

* Orignal test suite test is integrated into CTest, however due to the exit status of the 
  test harness all tests show PASS. Need to add a search capability to find the
  correct status. DO NOT RUN 'ctest -j n' or 'make -jn test'. Will kill the file
  system with stupid recursive copies.

* Need to move the -DPGSLIB, -DVERSION, etc. down to the drivers directory and 
  use configure_file to create the file instead of loading up the FPP flags.

* Need a C-coded executable return a build date string. C code to promote
  protability 'cuz 'date' is not supported on Windows.

* Add the python unittest harness.

* Need to configure Hypre with system LAPACK/BLAS or possibly MKL instead
  of building these with Hypre

* Change PGSLib Process* target to include PGSLib name.
