README_extex:

We can perform two component tests of the hex-to-hex mapping module in
this directory. One test uses an embedded unit test driver (Test 1),
the other uses a separate driver (Test 2).

------------------------------------------------------------------------
Test 1: The first test is performed by typing

        > python MAPVariable.py [-Hdi] [-f <params>]

   The optional command-line argument [-f] provides the prefix of a
   brief python-syntax file that defines the test parameters. An
   example (param_MAPVar.py, the default params file) is provided as
   well as a blank template (param_MAPVarTmpl.py).

   Option [-H] generates a help message and exits. Option [-d] sets
   the debug flag to True. Using option [-i] will result in the
   intermediate mesh files being written out in ASCII format.

   In this test, a field variable is extracted from our test XML
   output file (default 'phasechange_mixed.TBrook.xml') and is mapped
   from one exodus mesh to another exodus mesh. The output provides us
   with the field on the second mesh. Note that the test could also be
   performed by mapping from the Truchas XML mesh (in the
   'phasechange_mixed' problem) to another exodus mesh or vice
   versa. The code performing the component test starts after the last
   line in the file of this form:

        if __name__=='__main__':

   In the parameters file, the user defines the following values:

      InputsDir   : the source directory for input files
          (default: <TRUCHAS>/tools/scripts/test_TBrookParse/samples/)

      TBprefix    : the prefix (only) to a a TBrook.xml file
                    (expands to <TBprefix>_output/<TBprefix>.TBrook.xml)

      mesha       : a DICT of 'a' input mesh file and type
                    an empty DICT means use the TBrook mesh for 'a'

      meshb       : a DICT of 'b' input mesh file and type
                    an empty DICT means use the TBrook mesh for 'b'

      CSF         : coordinate scale factor for mesh 'a'

      mapRule     : the mapping rule: 'conservative' or 'constants_preserving'

   If either mesh (i.e mesha) is to come from an exodus file then the
   format of the respective mesh DICT is

      mesh<a|b> = {'<file>' : '<type>'}

   where <file> is the mesh file name to be read from InputsDir, and
   <type> is either 'TET' or 'HEX'.

   To substitute the Truchas default (XML) mesh for either 'a' or 'b',
   set the respective mesh DICT to a blank dictionary, thusly:

      mesh<a|b> = {}

   Given a custom parameters file [myParams.py], invoke the test like
   this:

      > python MAPVariable.py -f myParams

   Note: do not include the '.py' suffix.

------------------------------------------------------------------------
Test 2: The second component test is performed by typing

        > python test_mapping.py [-H] [-d] [-f <params>]

   The optional command-line argument [-f] provides the prefix of a
   brief python file that defines the test input. An example
   (param_Tet-Hex-Tet.py, the default params file) is provided as well
   as a blank template (param_MapTmpl.py). The parameter file is
   provided without the '.py' suffix to the script, like this:

        > python test_mapping.py -f param_Tet-Hex-Tet

   (Note: as param_Tet-Hex-Tet is the default, you do not need to
   specify it at all, if it is the parameter set you wish to use.)

   The other parameters behave as they do in Test 1.

   In this test, a number of field variables ([C=1,C=x,C=x+y,C=step
   function]) are mapped from 1 exodus mesh (source) to another exodus
   mesh (destination) and back to the original (source) mesh using
   both conservative ('CO') and constant preserving ('CP') map
   rules. This mapping, denoted as 'MA->MB->MA', can occur for a
   number of different source and destination meshes. 'MA' denotes the
   source mesh file, 'MB' denotes the destination mesh file.  

   In the parameter file, provide a source path (InputsDir) from which
   to read the exodus meshes.

   Also provide a list of exodus files containing source meshes and
   mesh types ('mesha_files') in the form of a python dictionary, and
   a list of exodus files containing destination meshes and types
   ('meshb_files'). For each mesh, the dictionary entry is of the
   form:

        mesha_files = {'<file1>' : '<type1>',
                       '<file2>' : '<type2>',
                       ...}

   where <typeN> is one of TET or HEX. The <fileN> names are simple
   (no path) names.  Multiple entries can be provide for both mesh
   lists. Ensure that the mesh types for each entry are correct. All
   pairings of 'a' and 'b' meshes will be executed.

   Additional information needed in the parameters file includes a
   filename ('filename') to which to write the diagnostic
   output. Diagnostics of the results of these mappings are placed in
   this file. I typically like to use the naming convention:

        filename = 'test_mapping_results_<descriptor>.txt'

   where <descriptor> denotes some unique descriptor of the mapping
   problem.

   The last parameter in the parameter file also has an entry for a
   graphics file prefix (graphicsname)

        graphicsname = '<prefix>' + '_'

   where <descriptor> denotes a descriptor of the mapping problem.
   ASCII GMV files containing the field variables at each stage of the
   MA->MB->MA mapping are also produced.  Using the prefix, gmv files
   of the following convention are produced.

        <prefix>_<MA>-<MB>_<stage>_<maprule>.gmv

   Here <MA> refers to the source mesh file (without the '.exo'
   extension) and <MB> refers to the destination mesh file (again
   without the '.exo' extension). <stage> refers to what mesh of the
   'MA->MB->MA' mapping that we are looking at, <stage> = ['A1' | 'B' |
   'A3'].  'A1' refers to the first stage (i.e before any mapping has
   occurred), 'B' refers to the second stage and 'A3' refers to the
   third stage (i.e after 2 mappings have occurred). Finally <maprule>
   can either be constant preserving (CP) or conservative (CO). Hence,
   for example, the file

        meshab_mesh1a-mesh1b_A3_CP.gmv

   is a gmv file showing results of a constants preserving (CP)
   mapping rule, at the third (final, A3) stage of the 'MA->MB->MA'
   map when the source file MA = 'mesh1a.exo' and the destination file
   MB = 'mesh1b.exo'. The graphicsname <prefix> of this example was
   'meshab_'.
