$Id: ChangeLog.90,v 1.1.1.1 2000/11/01 03:06:57 turner Exp $

------------------------------------------------------------------------
NOTE: Tags are made up of a major and a minor release number.  For
      example, tag "release3-2" has a major release number of 3 and a
      minor release number of 2.
------------------------------------------------------------------------

Tag: v10-9 (7/4/97)

Accompanying modules: Makefiles v2.42
                      JT_Tcl v2.0

- added workaround in src/ParallelInfo.F90 for IBM compiler
- fixed bug in My_ELL.F90
 > JT_ELL_matrix needed to be public
 > found by IBM compiler

Tag: v10-8 (5/30/97)

Accompanying modules: Makefiles v2.41
                      JT_Tcl v2.0

- further mods for additive Schwarz preconditioning in Telluride
 > now pass "vector" type into JT_ApplyPrecond
- now initialize all locally-allocated arrays in solver routines
- began adding symbolic names for control values

Tag: v10-7 (5/19/97)

Accompanying modules: Makefiles v2.41
                      JT_Tcl v2.0

- added new "vector" derived type
 > in src/vector_type.F90
 > consists of 4 rank-1 pointers
  - one for values, 3 aux arrays
  - passed to User_y_eq_Ax routine by solver routines
  - in support of parallel execution
 > limitations
  - not sure what to do about JT_ApplyPrecond
   > it can call a user routine for preconditioning
   > in addition, it can call JT_Jacobi, which performs a y=Ax
   > currently ignore, but keep in mind
  - JT_StoppingTest, and hence JT_CheckConvergence, can also call
    User_y_eq_Ax if the test based on || b - Ax || is used
   > currently simply disallow
   > is it needed?  for local solves the convergence check should be
     local anyway, and for global solves it will need to be truly
     global, so maybe not necessary
- status (only tested on Sun)
 > test suite works
 > matrix-free for y=Ax works

Tag: v10-6 (5/9/97)

Accompanying modules: Makefiles v2.41
                      JT_Tcl v2.0

- mods to GNUmakefile
 > fixed dist target
 > fixed dist filename (version variable)
- updated comment in Vector.F90
- mods to main solver routines
 > now recursive
 > RHS vector (b) now intent(in)
  - couldn't be before because of reverse communication

Tag: v10-5 (5/5/97)

Accompanying modules: Makefiles v2.41
                      JT_Tcl v2.0

- minor fix to test/GNUmakefile
- updated README
- added #ifdefs for IRIX since now Cray-based
- status
 > everything but incomplete factorization preconditioners work on
   Sun, SGI, IBM
 > scaling routines still missing
 > will not compile on DEC F90 (need to investigate)

Tag: v10-4 (4/23/97)

Accompanying modules: Makefiles v2.41
                      JT_Tcl v2.0

- fixed error in bin/f90dep.awk
- removed kludges in solver routines to perform matrix-vector
  multiplication prior to calls to JT_CheckConvergence in some cases
 > now simply pass in User_y_eq_Ax
- moved logic to determine whether to do user, no, or some preconditioning
  into guts of JT_ApplyPrecond
 > now pass in User_Precond and User_y_eq_Ax
  - rearranged arg list
 > eliminates some near-duplication of code that was error-prone
 > cleans up solver routines even more

Tag: v10-3 (4/16/97)

Accompanying modules: Makefiles v2.40
                      JT_Tcl v2.0

- added if block for building with PGSLib on more platforms
- toyed with switching to F90 includes instead of cpp includes
 > worked, but made debugging awkward
- eliminated includes for author and copyright info
- no longer use cpp to generated dependency makefile fragments
 > use only bin/f90dep.awk
- bin/memory.awk no longer used
 > solver routines now allocate/deallocate arrays explicitly
- everything but the incomplete factorization preconditioners in ELL
  seems to be working

Tag: v10-2 (3/31/97)

Accompanying modules: Makefiles v2.38
                      JT_Tcl v2.0

[This is an interim version.]

- initial changes to implement matrix-free option via user-defined
  routines passed to solver routines as optional arguments rather than
  via reverse communication
 > only CG at this point
 > to be propagated to BCGS and GMRES as well
 > mods to Main.F90 and Driver-guts.F90 as well
- mods to makefiles
 > updated for new IRIX, CraySoft compilers
 > updated PGSLib info
- removed some now-unnecessary #ifdef's for IRIX
- use .dep rather than .d for dependencies so as not to conflict with
  the EPC compiler
- updated exclude file
 > added *.dep and core
 > updated output filenames
- updated author info in a number of files

Tag: v10-1 (12/17/96)

Accompanying modules: Makefiles v2.34
                      JT_Tcl v2.0

- added bin/GNUmakefile, removed bin/mklinks.sh
- added ChangeLog from previous versions to this file
 > updated README
- added accompanying modules info for v10-0
- fixed bug in JT_GMRES
 > dynamically-allocated array v was not initialized, which caused
   problems on some platforms when an iterative method was used for
   preconditioning via reverse communication
- minor mods to driver for Gnuplot
- added info on v9-9

Tag: v10-0 (9/2/96)

Accompanying modules: Makefiles v2.33
                      JT_Tcl v1.9

- new version of the package as imported into CVS
 > based on v9-7
- differences between this version and the old version:
 > now fully object-based
 > module for each matrix storage type
  - contains type definition as well as routines to operate on that
    type
 > module for each solver
  - contains one routine for each matrix storage type
 > other routines grouped in modules as appropriate
 > eliminated subdirectories of src
  - moved include subdirectory of src up to top level
 > split out guts of JT_Main as new JT_Driver routine
 > eliminated _len arrays in JT_Main through use of TRIM
 > removed GetRandomFloat
  - not needed in F90
 > changed naming convention for tags from releaseM-N to vM-N
- status
 > TFQMR and GMRES seem to work
 > CG does not work
 > undocumented preconditioning options not functional due to bugs in
   Sun F90 v1.1
 > scaling routines missing
 > will not compile on DEC F90 due to compiler bugs

     >JTpack90<
-----------------------------------------
     >JTpack90-2<

Tag: release9-9 (12/16/96)

Accompanying modules: Makefiles v2.34
                      JT_Tcl v2.0

- fixed bug in JT_GMRES
 > dynamically-allocated array v was not initialized, which caused
   problems on some platforms when an iterative method was used for
   preconditioning via reverse communication

Tag: release9-8 (10/29/96)

Accompanying modules: Makefiles v2.33
                      JT_Tcl v1.9

- added CG_alt.F90
 > identical to CG.F90, but different names
  - facilitates using one to solve precond. system for the other
 > added dependency in GNUmakefile
 > added use stmt in JTpack.F90

Tag: release9-7 (8/26/96)

Accompanying modules: Makefiles v2.33
                      JT_Tcl v1.9

- ported to HP F90
- now use MOD in SetUpSaad routines

Tag: release9-6 (7/19/96)

Accompanying modules: Makefiles v2.31
                      JT_Tcl v1.9

- improved PGSLib support
 > primarily mods to test/src/Main.F90 and makefiles
 > use_PGSLib make variable in GNUmakefile can now have value of
   no, serial, or parallel
 > both serial and parallel versions w/PGSLib can be built in same
   tree
 > commented-out output and collate stmts in rev. comm.
- improved JT_Clock interface
 > removed mode arg, made time arg optional

Tag: release9-5 (7/11/96)

Accompanying modules: Makefiles v2.31
                      JT_Tcl v1.9

- use statements now inside subroutines rather than in module headers
 > eliminates need to make derived types public in modules containing
   routines with derived types in arg lists
- all uses of numbers_module now use only
- removed save statements in most module headers
- bug fixes and mods to Main
- mods to JT_CG and JT_GMRES
 > error checking related to rev. comm. wasn't quite right
- mods to test suite
 > pulled out run section and placed in separate makefile fragment as
   part of Makefiles
 > added awk script to better process output files
- brought JTpack90.tcl in sync with JTpack77.tcl
- moved several routines to src/Utilities, since no longer specifically
  BLAS1, BLAS2, etc.
 > Norm.F90, SwapVectors.F90, Sum.F90, MaxVal.F90
 > SwapVectors also renamed Swap.F90 and abstracted so can be
   extended to swap other entities
 > MaxVal abstracted as well

Tag: release9-4 (7/2/96)

NOTE: This tag was never applied.

Accompanying modules: Makefiles v2.30
                      JT_Tcl v1.9

- committed mods to facilitate parallel testing with PGSLib
 > currently uses ELL transpose storage format, which requires
   reverse communication for y=Ax, etc.
 > toggle serial or parallel in test/GNUmakefile
 > now look in pgslib-0.9 on cluster
 > must be careful not to use stopping test that requires ||A||

Tag: release9-3 (4/13/96)

Accompanying modules: Makefiles v2.27
                      JT_Tcl v1.9

- modified makefiles
 > modified code that sets MODULE_FFLAGS for SunSoft, CraySoft, and
   Fujitsu compilers
- abstracted JT_SetUpSaad
- removed tests for presence of optional args in calls to subroutines
  with those args in the arg list (unnecessary)
- removed workaround for DEC compiler bug related to save
 > had replaced single save stmt. in solver routines with save attribute
   for all local vars. and dynamically-allocated arrays
  - no longer necessary
- modified format of public statements (wasn't using ::)
- status
 > SunSoft 1.1: compiles fine, test suite successful
 > Fujitsu 2.03beta3: compiles fine, test suite successful
  - compile time comparable to SunSoft 1.1
 > CraySoft 1.0.4: unsuccessful compilation (module paths)
 > DEC: compiles fine, test suite successful
 > IBM: compiles fine, test suite successful
 > SGI: not tested

Tag: release9-2 (3/5/96)

Accompanying modules: Makefiles v2.25
                      JT_Tcl v1.9

- updated GUI to be in sync with JTpack77, diffs:
 > black-box option disabled
 > default method TFQMR rather than black-box
- realized some things about array_info_type
 > can remove idim
 > other components used almost exclusively in JT_Main
  - removed all other instances, except ia%format
 > really should eliminate altogether, and have separate types for each
   storage format
- added #ifdef blocks to JT_Clock and JT_FlushUnit to add underscore
  to ETIME and FLUSH, respectively, on AIX
 > eliminates need to compile with -qextname on AIX

Tag: release9-1 (2/7/96)

Accompanying modules: Makefiles v2.23
                      JT_Tcl v1.9

- fixed output bug in JT_CG
- removed greps for COO, CSS, and RSS storage in summary target of
  test/GNUmakefile
 > remnant of cut-and-paste from JTpack77
- lines now limited to max of ~80 characters
 > better for printing
 > some lines extend to 81 or 82, but most <80

Tag: release9-0 (2/6/96)

Accompanying modules: Makefiles v2.23
                      JT_Tcl v1.9

- coefficient and preconditioner now fully optional
 > currently JT_CG and JT_GMRES only
 > can pass in coeff. but no preconditioner, but not preconditioner and
   no coeff.
 > no preconditioner implies either no preconditioning or preconditioning
   via reverse communication
 > no coefficient implies y=Ax via reverse communication, and either no
   preconditioning or preconditioning via reverse communication
- fully ported to DEC Alpha
- verified on SunSoft F90 v1.1
 > required minor fix to -M
- more synchronization with JTpack77
 > control%precond options now match
 > both versions JT_CG have same order of operations
 > split JT_CheckConvergence into two routines
  - added JT_StoppingTest
 > modified error and warning messages to match JTpack77
 > test suites now run in the same manner
 > now use formats.inc
 > fixed bug in plotting
- cpp includes now all use quotes rather than angle brackets

Tag: release8-7 (1/16/96)

Accompanying modules: Makefiles v2.20
                      JT_Tcl v1.9

- modified INTENT of a few args in JT_B_eq_A_module
- modified makefiles
 > modified setting of MODULE_FFLAGS
 > modified movement of module info files for patched Fujitsu compiler
- use SAVE attribute rather than SAVE statement in JT_BCGS, JT_CG, and
  JT_GMRES as workaround for DEC compiler bug
- modified JT_GMRES
 > fixed bug
 > modified convergence test as in JTpack77
- fixed minor bug in JT_CheckConvergence
- noticed when running test suite that IC, MIC, RIC are broken when
  used in CG solver
 > investigate later, since Telluride doesn't use

Tag: release8-6 (12/19/95)

Accompanying modules: Makefiles v2.16
                      JT_Tcl v1.8

- changed use statement for PGSLib in ParallelInfo to use PGSLib_module
- added use JT_numbers_module to JT_Main and modified test/GNUmakefile
  accordingly

Tag: release8-5 (12/18/95)

Accompanying modules: Makefiles v2.16
                      JT_Tcl v1.8

- removed use of JT_numbers_module from JTpack_module

Tag: release8-4 (12/17/95)

Accompanying modules: Makefiles v2.16
                      JT_Tcl v1.8

- ported to OSF/1
- fixed bug in exclude (was leaving out bin/GNUmakefile.f90)
- updated doc/ToDo
- fixed bug related to setting of asymmetry value from command line
 > needed to add end= to read statement in JT_ParseArgFloat to
   prevent failure if value isn't present
- renamed numbers_insane.F90 to numbers_complete.F90
 > changed module name (was JT_numbers_module, which was the same
   as in numbers.F90 and was creating problems)
- makefile mods
 > ported to OSF/1
 > fixed bug in test/GNUmakefile for UNICOS
 > added unexport of big list variables in both makefiles
- modified README
 > updated to list OSF port
 > added blurb about F90 features used

Tag: release8-3 (12/4/95)

Accompanying modules: Makefiles v2.14
                      JT_Tcl v1.8

- added reverse communication for y=Ax to JT_GMRES
- updated header comments in memory.awk
- combined JT_VectorNorm and JT_MatrixNorm into single JT_Norm
  generic procedure
- modified JT_Main
 > degree of asymmetry (dvalue) can now be set on the command line to
   override the default value set in the input file
  - modified test/GNUmakefile accordingly (needs to be 0 for CG)
  - this was actually added in release8-2

Tag: release8-2 (11/28/95)

Accompanying modules: Makefiles v2.12
                      JT_Tcl v1.8

- tested reverse communication for y=Ax in JT_CG
- added input for various sized problems
 > copied from JTpack77
- added assignment operator for array_info_type entities
- modifications to JT_Main
 > now initialize ia, ja, iap, and jap
 > etc.

Tag: release8-1 (11/24/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- implemented preconditioning options 1 and 2 for new infrastructure
 > had been disabled in 8.0
 > added routines for operations involving diagonals to modules
   JT_B_eq_A_module and JT_y_eq_Ax_module
- status on various compilers:
 > SGI: compile problems (JT_Main too big to optimize)
 > IBM: compiles, runs fine
 > Sun/CraySoft 1.0.3: compilation fails for JT_Main
 > Sun/Fujitsu 2.0.2: compiles, runs fine
 > Cray: unknown (probably still has trouble finding modules)

Tag: release8-0 (11/24/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- major rewrite
 > eliminated use of assumed-size arrays
- ripped out support for user-supplied routines for y=Ax and
  preconditioning
 > tired of problems on SGI
 > too much hassle to support with new infrastructure
 > no real need as long as reverse communication option is available

Tag: release7-3 (11/22/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- modified JT_Jacobi_ELL and JT_SOR_ELL
 > use "where" to protect against x(0) rather than temporary
  - enabled elimination of some temporaries and some bug workarounds
    on SGI
- added use of "where" to protect against x(0) in JT_y_eq_y_minus_Ax_ELL
- fixed bug in JT_ApplyPrecond
 > for m-step preconditioning for ELL storage, m was always 1

Tag: release7-2 (11/20/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- made arguments User_y_eq_Ax and User_ApplyPrecond optional
 > should probably add more checking of appropriate element of
   control%matvec and control%precond relative to their presence
 > no more need for JT_Null, which was sort of an abomination left over
   from F77 anyway
 > seems to get around SGI compiler bug involving externals
- combined storage-specific incomplete factorization routines (e.g.
  JT_IC_Full and JT_IC_ELL) into single module (e.g. JT_IC_module) /
  file (e.g. IC.F90)
- combined storage-specific stationary solver routines (e.g. JT_SOR_Full
  and JT_SOR_ELL) into single module (e.g. JT_Jacobi_module) / file
  (e.g. SOR.F90)
- status on various compilers:
 > SGI: compile problems
 > IBM: compiles, runs fine
 > Sun/CraySoft 1.0.3: compiles except for JT_Main
 > Sun/Fujitsu 2.0.2: compiles, runs fine
 > Cray: compile problems (finding modules)

Tag: release7-1 (11/19/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- added use of public/private in all modules
 > led to discovery that had been using specific names rather than
   generic for JT_ParseArg in JT_Main
- fixed bug in JT_Stationary_module
 > wasn't using JT_Clock_module
 > showed up as failure to load (missing symbol)
- modified JTpack_module
 > now explicitly list used modules, rather than using BLAS1_module, etc.
 > removed intermediate modules (BLAS1_module, Solver_module, etc.)
  - can't think of a good reason to keep them

Tag: release7-0 (11/16/95)

Accompanying modules: Makefiles v2.11
                      JT_Tcl v1.8

- added reverse communication for matrix-vector multiplication to JT_CG
 > enabled when control%matvec = -2
 > requires control%precond <= 0
  - if >0 on entry, it is set to 0 and execution continues
 > requires control%anorm to be input if ABS(control%stop) = 1
 > not yet implemented for other methods
 > untested
- major modifications to documentation of modules
 > added [g|n]awk script to generate info on modules used and routines
   contained in a module
  - bin/modules.awk
 > changed doc/Modules to doc/Modules.cpp
  - now uses cpp to include doc/Modules.list, which is generated by
    GNUmakefile
 > updated doc/Modules.cpp
- modifications to "use" statements
 > new philosophy - explicit "use" statement for all modules explicitly
   needed
  - e.g. use JT_types_module in virtually all routines, even if used
    implicitly by other used modules
 > now make use of "only" attribute where appropriate where appropriate
- more arrays converted to assumed-shape
- added two new meta-modules
 > JT_Input_module (just uses JT_ParseArg_module now)
 > JT_Utilities_module
- modified makefile
 > added setting of list (suffix for list files) and mif (suffix for
   module information files) to .f90 fragment in Makefiles
- updated author.inc

Tag: release6-1 (11/2/95)

Accompanying modules: Makefiles v2.8
                      JT_Tcl v1.8

- changed more arrays to assumed-shape
- tested with CraySoft 1.0.3
 > had to reverse order of -p options in test/GNUmakefile to get it
   to compile JT_Main
 > test ../bin/main_8g prompt=no problem=2 method=CG pre=ILU scale=2
   core dumps (segmentation fault)
- changed "use PGSLib_Globals_module" to "use PGSLib_module" in
  global reduction routines
 > more resistant to internal changes in PGSLib

Tag: release6-0 (11/1/95)

Accompanying modules: Makefiles v2.8
                      JT_Tcl v1.8

- totally new version of library
 > imported into CVS as new module, JTpack90 rather than JTPACK90
 > all routines encapsulated in modules
  - sometimes multiple routines in single module
 > new hierarchy of modules
  - mid-level modules like BLAS1_module, Solvers_module, etc.
  - highest level is JTpack_module, which includes everything
 > compiles and runs successfully on IBM
 > bug in SGI compiler related to externals prevents compilation

     >JTpack90-2<
-----------------------------------------
     >JTpack90-1<

Tag: release5-1 (10/30/95)

Accompanying modules: Makefiles v2.8
                      JT_Tcl v1.8

- fixed bug in JT_CheckConvergence
 > had ja declared as type(array_storage_type) !!
- changed array b to intent(inout) in non-stationary solver routines
 > can be output when doing reverse communication
 > this was uncovered by the new version being developed that has all
   routines in modules
- changed control and array_info to control_type and array_info_type
  everywhere
- removed unnecessary functions ij2i and ijk2i
- removed unnecessary BLAS1 routines
- has fragments of code for using PGSLib for gathers in matrix-vector
  multiplications scattered throughout but disabled

Tag: release5-0 (9/29/95)

Accompanying modules: Makefiles v2.6
                      JT_Tcl v1.8

- implemented derived types for array info and iparm/rparm
 > JT_array_info (for ia, iap, ib)
 > JT_control (combines iparm and rparm)
 > eliminates confusing cpp define stuff I was doing
- updated exclude
- noticed that GMRES in v4.1 exhibits a problem on the SGI
 > result from test suite looks bogus for optimized version
  - debug version is OK
 > both optimized and debug work fine on AIX

Tag: release4-1 (9/11/95)

Accompanying modules: Makefiles v2.6
                      JT_Tcl v1.7

- added JT_ParallelInfo_module
 > patterned after similar module in Telluride
 > contains type PEinfo and routine JT_ParallelInit
- modified makefiles to use serial version of PGSLib if on LANL IBM
  cluster
- all global reduction intrinsics now embedded in wrapper routines
  called JT_<std-name>
 > currently only use Dot_Product, MaxVal, and Sum
  - created JT_Dot_Product, JT_MaxVal, JT_Sum
  - need to be generic functions
 > routines use PGSLib global reduction routines if appropriate
- all writes in library routines (not JT_Main) now done via character
  strings passed to new routine JT_WriteString
 > checks to make sure only IO_ROOT_PE does writes
 > doesn't affect serial code
- listing now obtained under AIX
- list files now deleted by gmake clean
- added JT_logical_type to types
- removed OpenUnitAppend
 > no longer needed, since F90 standardized position='append'
- added input files for tiny, small, and big problems
 > tiny for day-to-day testing
 > small for benchmarking on slow machines (SPARC 2 class)
 > big for benchmarking on faster machines
 > added script to facilitate switching between problems

Tag: release4-0 (8/30/95)

Accompanying modules: Makefiles v2.5
                      JT_Tcl v1.5

- status of this version:
 > IBM/AIX 3.2/XLF
  - compiles fine
  - runs fine, but errors for GMRES look high
 > SPARC/Solaris 2.4/CraySoft 1.0.2,3
  - compiles fine
  - runs in batch mode but not interactively (Bus Error)
 > SGI/IRIX 6.1
  - compiles fine
  - runs fine, but errors for GMRES are *way* high
- major modifications to get back in sync with JTPACK
 > updated istop options to match those in JTPACK
  - added routines to compute matrix norm
   > 1-norm not implemented for ELL format
   > should probably revisit implementation at some point
 > updated iout options to match those in JTPACK
 > updated iresid options to match those in JTPACK
  - now have option to replace r with b-Ax in JT_CG
 > in the process essentially replaced JT_Main and JT_CheckConvergence
   with versions in JTPACK and re-converted to F90
 > copied over JTPACK GUI for use with JTPACK90
  - only minor changes required since the two are back in sync
 > some differences remain
  - BCGS/TFQMR do not make use of b-Ax as in JTPACK version
  - loops in y=Ax routines not unrolled as in JTPACK versions
  - only routines that allocate temporary arrays as allocatable return
    status variables in JTPACK90, while every routine in JTPACK returns
    a status variable
- fixed minor mistake in test/GNUmakefile
 > wasn't moving .T files to test/tmp under CraySoft on SPARC
- modified makefiles so can run test suite on debug version as well
  as optimized version
- removed #ifdef blocks for AIX from JT_Clock and JT_FlushUnit
 > different names for system routines handled by command-line option
- removed use statement for JT_types_module in routines that also
  use JT_numbers_module, since it uses JT_types_module
- changed lots of if blocks to case statements
- added alternative for large matrices in matrix and system output
  routines

Tag: release3-1 (8/3/95)

Accompanying modules: Makefiles v2.4
                      JT_Tcl v1.3

- ported to CraySoft on SPARC
 > builds and runs test suite successfully
 > fixed bug in use of KIND in JT_Clock
 > problems porting to PVPs due to differences in treatment of
   modules
- re-ported to IBM F90
 > builds and runs test suite successfully
- partially re-ported to Fujitsu
 > not tested
- verified build on SGI
 > builds and runs test suite to completion
 > possible bug in compiler
  - bogus answers for test suite problem using ELL, GMRES, no
    preconditioning
- changed automatic arrays in JT_BCGS, JT_CG, and JT_GMRES to
  allocatable
 > need to be allocatable because reverse communication requires local
   variables to be saved between invocations
- modified memory.awk
 > improved explanation of variables in header
 > now checks for successful allocation
  - added variables status and error, as JTPACK's memory.awk
  - use optional stat argument of allocatable to test
 > now protect deallocate with an "if (allocated(array))"
 > modified routines that use allocatable arrays to correspond to
   these changes
 > modified test/GNUmakefile and makefile fragment that invokes
   memory.awk as appropriate
- added comment about doc subdirectory in release3-0 tag
- updated several of the doc files
- modified makefiles
 > set jtpackbindir to same thing as bindir
  - makefile fragment GNUmakefile.alloc now uses jtpackbindir instead
    of bindir, since other packages will likely have their own bindir
 > added definition of package (same as LIB), since makefile fragment
   GNUmakefile.dist now uses it instead of LIB in the tar file name
 > numerous changes related to porting
- added save statement to types and numbers modules

Tag: release3-0 (6/21/95)

Accompanying modules: Makefiles v2.0
                      JT_Tcl v1.3

- moved some doc files to new doc subdirectory
- changed all routines to free-format
- added use of intent attribute everywhere it was missing
- added module JT_types_module to define integer parameters JT_int_type
  and JT_real_type for use in kind attribute in all declarations
 > modified memory.awk to allow specification of value or parameter
   for kind attribute
- converted numbers.inc to module (numbers.F90)
- ported to SGI F90 compiler
 > this is an alpha or beta release compiler
 > makefiles hardwired for the way this compiler treats modules in
   this version (will generalize later)
  - creates separate module information file for each module (even
    if a file contains more than one module)
  - file created in cwd
  - filename is module name in all caps, with suffix kmo
  - compiler uses -I as search path for module information files as well
    as includes
- extensive changes to makefiles
 > changes in filename suffixes
 > changes in setting of Fortran flags
 > library now built before test program routines
 > many other changes
 > module dependencies are not correct

Tag: release2-4 (6/19/95)

Accompanying modules: Makefiles v1.7
                      JT_Tcl v1.3

- added link to GNUmakefile.strat makefile fragment in mklinks.sh
- added comment in GNUmakefile to note port to CraySoft F90

Tag: release2-3 (6/16/95)

Accompanying modules: Makefiles v1.7
                      JT_Tcl v1.3

This is really an interim version.  There are several changes that
are definitely needed, most notably:
  1) use of KIND in declarations
  2) change temporaries in iterative solvers from automatic arrays to
     allocatable, since automatics are not SAVEd (so this version would
     break if reverse communication were attempted)
Nevertheless, I wanted to assign a tag to everything at this point
since many changes have been made.  Significant changes made to the
Fortran 77 version of this package also have yet to be incorporated.

- ported to CraySoft F90
 > only works in single-precision (need to use kind)
- modified makefiles for Makefiles-1.7
- modified iterative solver routines to set istatus to zero before
  returning when initial guess is found to be the solution
- fixed bug in JT_CheckConvergence
 > wasn't computing err when istop < 0
- fixed bug in JT_GMRES
 > test to decide whether to compute new iterate was wrong
  - wasn't computing when istop < 0
- fixed bug in JT_Stationary
 > was incrementing iteration count twice each iteration
- added guidance on istop to parmdesc.inc
- upgraded declarations in several routines to F90 style
 > use intent attribute
 > give bounds wherever possible (limit use of assumed-size)

Tag: release2-2 (3/1/95)

- modified the BLAS2 routines that deal with diagonals to use array syntax
- all BLAS1, BLAS2 and many other routines now use intent attribute in
  declarations
- started deleting blank comment lines (lines with only a c in column 1)
  and replacing them with totally blank lines
- modified JT_LeftJustifyMatrix to use some array syntax
 > still needs work
- modified JT_y_eq_Ax_ELL, JT_y_minus_Ax_ELL, JT_Jacobi_ELL, and
  JT_SOR_ELL to use array syntax and Dot_Product intrinsic where possible
 > removed unrolled loops for certain values of maxnz for the time
   being (may add again later)
- found local work array in JT_CheckConvergence that wasn't being
  dynamically-allocated
 > now an automatic array
 > modified iterative solver routines accordingly
- updated ToDo

Tag: release2-1 (2/23/95)

- changes to makefiles
 > more changes related to changing name of library, etc.
 > improved rule for Clock when using Fujitsu compiler
- unrolled loops for some values of maxnz in JT_y_eq_Ax_ELL,
  JT_y_minus_Ax_ELL, JT_Jacobi_ELL, and JT_SOR_ELL
 > improves performance by ~15% for maxnz = 5 on SPARC IPX
- started port to Cray cf90 (not finished)
- updated Performance file

Tag: release2-0 (2/18/95)

- name of library now jtpack90_n[g], where n is number of bytes per
  real, and g is present if a debug version is built
 > same convention used for other make targets as well
- removed some unused variables from some routines
- fixed *really* dumb mistake in JT_VectorNorm that caused the wretched
  performance noted for release1-0
 > replaced Performance file with new version
- split out common portions of Makefiles
 > now in completely separate CVS module called Makefiles
 > added Bourne shell script in bin that must be executed when working
   copy is 1st checked out of repository
  - makes links to makefile fragments in working copy of Makefiles
    module
  - script excluded from distribution tar file (no need for it)
 > fragment that figures out environment checks to see whether running
   Solaris 2.x on Suns
  - Solaris 2.x is SysV (like HP-UX and UNICOS), so doesn't have/need
    ranlib
 > when distribution tar file is created, h option is used so that
   symbolic links are followed
- gcc now used for cpp if available (still *required* on HP-UX)
 > modified iadefines.h, etc. because gcc's cpp doesn't strip away
   extra blank spaces in defines (made some lines too long after
   substitutions were made)
- removed verbose option from cpp and f77
- added initialization of vector d in JT_BCGS
 > was being referenced before being set, but was being multiplied by
   zero, so didn't really matter
- fixed copyright date
- changed .eq. to == in all routines
- changed all relational operators to new style in JT_BCGS and JT_Main

Tag: release1-0 (1/30/95)

- added initial version of Performance file
 > simply result of running test suite on IBM RS/6000 Model 590 at
   this point
  - note that performance is absolutely wretched, esp. for ELL storage
    (compare to times in Performance.77)
- added F90 version of numbers.inc
 > included in all routines needing numbers
- eliminated everything related to NSPCG
 > removed all NSPCG-related code in JT_Main
  - should re-work some of the input sometime
 > deleted test/in/nspcg.in
 > deleted NSPCG-related routines in test/src
- modified many routines to use F90-style array declarations
- split out declaration of local variables (including automatic arrays)
  from declaration of variables passed in/out

Tag: start (1/29/95)

- this is the package as imported into CVS
- it actually compiles and executes the test suite successfully with
  XLF Fortran (for IBM RS/6000)
- differences between this version and the old version:
 > changed all unconditionally allocated temporary working arrays to
   automatic arrays
 > changed obvious stuff to array syntax
  - calls to JT_FillVectorFloat, JT_y_eq_x, etc.
  - new intrinsics like Dot_Product, MaxVal, Sum, etc.
  - removed some of the BLAS1 routines
 > modified memory.awk
  - now only needs to write out stuff for allocatable arrays
  - no need for dimensions_known_at_declaration any more
 > modified makefiles
  - no need for cpp defines use_allocatable and use_automatic any more
