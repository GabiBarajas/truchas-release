
Discussion of various implementation considerations and design decisions
________________________________________________________________________

Last modified: 06/21/95, 18:02:20


Naming of routines, files, etc.
-------------------------------

Routines are given long, expressive, mixed-case names that hopefully
give both user and developer a good idea what each routine does.

The 1st three characters of each routine name are JT_.  This helps
ensure uniqueness and avoid conflicts with names of user or system
routines.  Filenames omit these characters.

Routines that perform operations specific to a storage format have a
descriptive string appended to the name.  For example, the names of
all routines that perform operations specific to matrices stored in
the ELLPACK-ITPACK format (also known as primary format) end with the
characters _ELL.


Use of parameter vectors required use of cpp defines
----------------------------------------------------

Many routines, especially the iterative solvers, need lots of
parameters, some of which are input, some output, and some of which
enter with one value and are modified by the routines.  Examples are
the maximum number of iterations to allow, the number of iterations
actually completed, logical units for output and errors, etc.

Of course, different routines require different parameters.

I wanted to find a method that would allow me to do two things:

1) Allow a parameter list to be defined such that parameters could be
added later with minimal impact on the user.  That is, I want to be
able to add parameters and not have the parameter list actually
change.

This led to the use of two vectors, iparm and rparm, containing
control and information parameters like those mentioned above.

2) I didn't want to have to refer to the relaxation parameter as,
e.g., rparm(3) all through the routines, but rather as, e.g., omega.
I wanted to essentially equivalence the names omega and rparm(3).
Since Fortran doesn't allow this, I use cpp defines.  The .F files
containing routines that are passed iparm and rparm, for example, 
simply include the file parmdefines.h and refer to the elements of the
vectors by the descriptive names.  Then the C preprocessor replaces
the descriptive names by the actual elements of the vectors when the
.F files are converted to .f files.


Automatic determination of environment
--------------------------------------

To a great extent, the makefiles automatically determine the machine,
operating system, operating system version, available memory, etc.,
and define commands, flags, etc. as appropriate.


Automatic dependency generation
-------------------------------

The makefiles generate dependencies automatically by processing .F
files with cpp -M.


Dynamic memory
--------------

All temporary arrays are allocated dynamically.  In addition, arrays
allocated dynamically are always deallocated by the same routine that
allocates them.

The actual lines of code that declare, allocate, and deallocate the
dynamically-allocated arrays are generated automatically by a gawk
script that parses a file containing information about the arrays that
need to be allocated dynamically for each routine.  This minimizes
chances for mistakes like memory leaks (forgetting to add a call to
free for an array you added), but complicates the makefiles somewhat
due to the complicated dependencies.


Input / Output
--------------

All routines that perform I/O assume that output files have already
been opened.

When full output is desired, it is often for debugging, so since the
output is often buffered and only written in chunks, a system-
dependent routine, JT_FlushUnit, is called after debug information
is written.  This way if the code dies, you won't lose stuff that has
recently been "written" out, which is often the most important in
tracking down the problem.
