PROG = UbikTest
LIBNAME = UbikSolve

# Directories.

dot := $(shell pwd)
top = ../../..

include $(top)/config.mak
makeutilsdir := $(dot)/../../../$(makeutilsdir)
bindir = ../../run/$(platform)
includedir = ../../include
srcdir = ../../src
libincludedir = $(top)/include
libbuilddir = $(top)/build
libdir = $(libbuilddir)/$(platform)

# Info about environment.

include $(makeutilsdir)/env.mak

# Fortran setup.

include $(makeutilsdir)/f90.mak
include ../module_fflags.mak

# cpp setup.

include $(makeutilsdir)/cppflags.mak
ifneq ($(use_PGSLib),no)
  CPPFLAGS += -Duse_PGSLib
endif

CPPINCLUDES = -I$(libincludedir) -I$(includedir)
FINCLUDES = $(CPPINCLUDES)
DBXFLAGS = $(CPPINCLUDES)

# Link flags.

include ../ldflags.mak

ifneq ($(use_PGSLib),no)
  ifeq ($(use_PGSLib),serial)
    pgslib = _ser
    LDFLAGS += -L$(PGSLibdir)/lib -lpgslib-ser
  else
    pgslib = _par
    LDFLAGS += -L$(PGSLibdir)/lib -lpgslib-par -L$(MPIdir) -lmpi
  endif
endif

# Files, etc.

F90_files = $(wildcard $(srcdir)/*.F)
src_names := $(notdir $(basename $(F90_files)))
ifeq ($(os),CYGWIN)
  # for windows compilers, by default executable is named using first object in list,
  # so ensure that $(PROG) is first
  src_names := $(filter-out $(PROG), $(src_names))
  src_names := $(PROG) $(src_names)
endif
f90_files = $(addsuffix .f90,$(src_names))
obj_files = $(addsuffix .$(obj),$(src_names))
input_files = $(inputdir)/BCGS-jacs

LIB = $(libdir)/$(libprefix)$(LIBNAME)

trash = *~ .*~ core $(srcdir)/*.c *.DPR
intel_trash = *.d *.pc
secondary_files = *.l *.T *.lst *.L *.out *.M *.kmo *.mod *.o *.obj *.OBJ *.a *.lib $(intel_trash)
primary_files = *.dep *.DEP *.f90 *.F90

##################### DIRECTIVES #####################

# Path(s).

vpath %.F $(srcdir):$(includedir)

# Export most variables to sub-makes (unexport big lists).

export
unexport F90_files f90_files obj_files
unexport trash secondary_files primary_files

################### SPECIAL TARGETS ###################

# Force these targets to be made, even if the target seems up-to-date.
# (Only possible if bindir=.).

.PHONY: $(PROG)

# Keep .f90 files around for use with the debugger (otherwise they'd be deleted
# since they are intermediate files).

.PRECIOUS: %.f90

################### REGULAR TARGETS ###################

# tests

check:
	@echo
	@echo ">>>>>>> in" $(dot) "<<<<<<<<"
	@echo
	@echo "path to Makeutils: " $(makeutilsdir)
	@echo "operating system:  " $(os)$(os_ver)
	@echo "architecture:      " $(arch)$(arch_ver)
	@echo "C preprocessor:    " $(CPP) $(CPPFLAGS)
	@echo "Fortran compiler:  " $(compiler)$(compiler_ver)
	@echo "  command:  " $(FC) $(FFLAGS) $(MODULE_FFLAGS)
	@echo "Link flags: " $(LDFLAGS)

# dependencies (hard-coded - not generated automatically)

include ../deps.mak

# How to get .f90 files from .F files.

include $(makeutilsdir)/F2f.mak

# How to get .$(obj) files from .f90 files.

include $(makeutilsdir)/compile_f90.mak

$(PROG): $(obj_files)
        # create the output directory if it doesn't exist
	@$(ECHO)
	if [ ! -d $(bindir) ];  \
        then  \
         $(MKDIR) $(bindir);  \
        fi

        # link
        ifeq ($(os),CYGWIN)
	  $(FC) $^ $(LDFLAGS) $(ADDL_LDFLAGS)
        else
	  $(FC) $^ $(LDFLAGS) $(ADDL_LDFLAGS) -o $(PROG)
        endif

        # move the executable into place
	$(MV) $(PROG)$(exe) $(bindir)

# Cleanup.

include $(makeutilsdir)/cleanup.mak

### Local Variables: ###
### tab-width: 8 ###
### End: ###
